generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RepairOrderStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  CANCELLED
}

enum UserRole {
  ADMIN
  EMPLOYEE
  USER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Email único
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(EMPLOYEE)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  companies       UserCompany[] // Relación con empresas
  accounts        Account[]
  sessions        Session[]
  assignedVehicles Vehicle[]     @relation("AssignedEmployee")
  repairOrders    RepairOrder[] @relation("AssignedEmployee")
  repairLogs      RepairLog[]

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       UserCompany[] // Relación con usuarios
  vehicles    Vehicle[]
  services    Service[]
  appointments Appointment[]
  repairOrders RepairOrder[]
  clients     Client[]

  @@map("companies")
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("user_companies")
}

model Vehicle {
  id           String   @id @default(cuid())
  make         String?
  model        String?
  year         Int?
  vin          String?
  license      String?
  color        String?
  mileage      Int?
  companyId    String
  Company      Company  @relation(fields: [companyId], references: [id])
  assignedToId String?
  assignedTo   User?    @relation("AssignedEmployee", fields: [assignedToId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  companyId   String
  Company     Company  @relation(fields: [companyId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Appointment {
  id          String           @id @default(cuid())
  date        DateTime
  notes       String?
  status      AppointmentStatus @default(PENDING)
  companyId   String
  Company     Company          @relation(fields: [companyId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RepairOrder {
  id            String           @id @default(cuid())
  orderNumber   String
  status        RepairOrderStatus @default(OPEN)
  assignedToId  String?
  clientId      String?
  companyId     String
  Company       Company          @relation(fields: [companyId], references: [id])
  assignedTo    User?            @relation("AssignedEmployee", fields: [assignedToId], references: [id])
  client        Client?          @relation(fields: [clientId], references: [id])
  repairLogs    RepairLog[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([orderNumber, companyId])
  @@unique([orderNumber])
}

model RepairLog {
  id            String       @id @default(cuid())
  description   String
  repairOrderId String
  userId        String
  RepairOrder   RepairOrder  @relation(fields: [repairOrderId], references: [id])
  User          User         @relation(fields: [userId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Client {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  phone       String
  companyId   String
  Company     Company       @relation(fields: [companyId], references: [id])
  repairOrders RepairOrder[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([email, companyId])
  @@unique([phone, companyId])
}